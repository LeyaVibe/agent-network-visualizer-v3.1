/**
 * –¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–¥–ø—Ä–∞–≤–∏–ª–∞–º–∏
 */

import { ClanSystem, DISTRIBUTION_RULES, DEMOCRACY_SUBRULES } from './src/lib/clanSystem.js';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤\n');

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
function createTestAgents(count) {
    const agents = [];
    for (let i = 0; i < count; i++) {
        agents.push({
            id: i,
            cluster: Math.floor(i / 5), // 5 –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä
            economics: {
                alive: true,
                currentResources: 100,
                minSurvival: 10,
                accumulatedResources: 0
            }
        });
    }
    return agents;
}

// –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–≤—è–∑–µ–π
function createConnectionMatrix(agents) {
    const matrix = [];
    for (let i = 0; i < agents.length; i++) {
        matrix[i] = [];
        for (let j = 0; j < agents.length; j++) {
            if (i === j) {
                matrix[i][j] = 0;
            } else if (Math.floor(i / 5) === Math.floor(j / 5)) {
                // –°–∏–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
                matrix[i][j] = 0.7 + Math.random() * 0.3;
            } else {
                // –°–ª–∞–±—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
                matrix[i][j] = Math.random() * 0.2;
            }
        }
    }
    return matrix;
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–∞–≤–∏–ª –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏
console.log('üìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–∞–≤–∏–ª –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏\n');

const subrules = Object.values(DEMOCRACY_SUBRULES);
subrules.forEach(subrule => {
    console.log(`\nüîπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø—Ä–∞–≤–∏–ª–∞: ${subrule}`);
    
    const agents = createTestAgents(5);
    const connectionMatrix = createConnectionMatrix(agents);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–Ω
    const clan = {
        id: 0,
        members: agents,
        memberIndices: [0, 1, 2, 3, 4],
        density: 0.8,
        strength: 100,
        totalResources: 500,
        decision: {
            rule: DISTRIBUTION_RULES.DEMOCRACY,
            subrule: subrule
        }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    const initialResources = agents.map(a => a.economics.currentResources);
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    const clanSystem = new ClanSystem();
    clanSystem._distributeDemocracy(clan, connectionMatrix, agents, subrule);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('–ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:', initialResources.join(', '));
    console.log('–ö–æ–Ω–µ—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:', agents.map(a => a.economics.currentResources.toFixed(1)).join(', '));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã
    const initialTotal = initialResources.reduce((sum, r) => sum + r, 0);
    const finalTotal = agents.reduce((sum, a) => sum + a.economics.currentResources, 0);
    console.log(`–°—É–º–º–∞: ${initialTotal} ‚Üí ${finalTotal.toFixed(1)} (${Math.abs(initialTotal - finalTotal) < 0.01 ? '‚úÖ' : '‚ùå'})`);
});

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∫—Ç–∞—Ç—É—Ä—ã
console.log('\n\nüìä –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∫—Ç–∞—Ç—É—Ä—ã\n');

const agents2 = createTestAgents(5);
const connectionMatrix2 = createConnectionMatrix(agents2);

const clan2 = {
    id: 0,
    members: agents2,
    memberIndices: [0, 1, 2, 3, 4],
    density: 0.8,
    strength: 100,
    totalResources: 500,
    decision: {
        rule: DISTRIBUTION_RULES.DICTATORSHIP
    }
};

console.log('–ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:', agents2.map(a => a.economics.currentResources).join(', '));

const clanSystem2 = new ClanSystem();
clanSystem2._distributeDictatorship(clan2, connectionMatrix2, agents2);

console.log('–ö–æ–Ω–µ—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:', agents2.map(a => a.economics.currentResources.toFixed(1)).join(', '));

// –ù–∞—Ö–æ–¥–∏–º —Å–∏–ª—å–Ω–µ–π—à–µ–≥–æ
let maxResources = 0;
let strongestIndex = -1;
agents2.forEach((agent, i) => {
    if (agent.economics.currentResources > maxResources) {
        maxResources = agent.economics.currentResources;
        strongestIndex = i;
    }
});

console.log(`–°–∏–ª—å–Ω–µ–π—à–∏–π –∞–≥–µ–Ω—Ç: ${strongestIndex} —Å ${maxResources.toFixed(1)} —Ä–µ—Å—É—Ä—Å–∞–º–∏`);
console.log(`–û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–µ—é—Ç –º–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è: ${agents2.filter((a, i) => i !== strongestIndex).every(a => a.economics.currentResources === 10) ? '‚úÖ' : '‚ùå'}`);

// –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –∫–ª–∞–Ω–∞–º–∏
console.log('\n\nüìä –¢–µ—Å—Ç 3: –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å –∫–ª–∞–Ω–∞–º–∏\n');

const agents3 = createTestAgents(15); // 3 –∫–ª–∞–Ω–∞ –ø–æ 5 –∞–≥–µ–Ω—Ç–æ–≤
const connectionMatrix3 = createConnectionMatrix(agents3);

const clanSystem3 = new ClanSystem({
    minClanSize: 3,
    densityThreshold: 0.5
});

// –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∞–Ω—ã
const clans = clanSystem3.identifyClans(agents3, connectionMatrix3);
console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–ª–∞–Ω–æ–≤: ${clans.length}`);

// –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
clans.forEach(clan => {
    clanSystem3.makeClanDecision(clan);
    console.log(`\n–ö–ª–∞–Ω ${clan.id + 1}:`);
    console.log(`  –†–∞–∑–º–µ—Ä: ${clan.members.length}`);
    console.log(`  –ü—Ä–∞–≤–∏–ª–æ: ${clan.decision.rule}`);
    console.log(`  –ü–æ–¥–ø—Ä–∞–≤–∏–ª–æ: ${clan.decision.subrule || '–Ω–µ—Ç'}`);
    
    const initialResources = clan.members.map(a => a.economics.currentResources);
    clanSystem3.distributeResources(clan, connectionMatrix3, agents3);
    const finalResources = clan.members.map(a => a.economics.currentResources);
    
    console.log(`  –†–µ—Å—É—Ä—Å—ã –¥–æ: ${initialResources.map(r => r.toFixed(0)).join(', ')}`);
    console.log(`  –†–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ: ${finalResources.map(r => r.toFixed(1)).join(', ')}`);
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = clanSystem3.getClanStatistics();
console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log(`  –í—Å–µ–≥–æ –∫–ª–∞–Ω–æ–≤: ${stats.totalClans}`);
console.log(`  –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${stats.averageSize.toFixed(1)}`);
console.log(`  –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: ${stats.averageDensity.toFixed(2)}`);
console.log(`  –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${stats.totalResources.toFixed(0)}`);

console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
