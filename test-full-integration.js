import { runEnhancedSimulation } from './src/lib/enhancedSimulation.js';

console.log('=== –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢: –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å —ç–∫–æ–Ω–æ–º–∏–∫–æ–π ===\n');

// –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
const agents = [];
for (let i = 0; i < 150; i++) {
    agents.push({
        id: i,
        values: Array(10).fill(0).map(() => Math.random())  // –ò—Å–ø–æ–ª—å–∑—É–µ–º values, –Ω–µ vector
    });
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã
const topics = Array(10).fill(0).map((_, i) => ({
    id: i,
    name: `–¢–µ–º–∞ ${i}`,
    vector: Array(10).fill(0).map(() => Math.random())
}));

console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:');
console.log(`- –ê–≥–µ–Ω—Ç–æ–≤: ${agents.length}`);
console.log(`- –¢–µ–º: ${topics.length}`);
console.log(`- –¶–∏–∫–ª–æ–≤: 50`);
console.log(`- –≠–∫–æ–Ω–æ–º–∏–∫–∞: –≤–∫–ª—é—á–µ–Ω–∞`);
console.log(`- –ö–ª–∞–Ω—ã: –≤–∫–ª—é—á–µ–Ω—ã`);
console.log(`- –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã: –≤–∫–ª—é—á–µ–Ω—ã`);

console.log('\nüéÆ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...\n');

const startTime = Date.now();

const result = runEnhancedSimulation({
    agents,
    topics,
    cycles: 50,
    threshold: 0.3,
    economicEnabled: true,
    economicParams: {
        baseProductivity: 10,
        minSurvival: 10,
        maxMultiplier: 2.0,
        strongConnectionThreshold: 0.3,
        connectionBonus: 0.1,
        economicCycleInterval: 5
    },
    clanParams: {
        minClanSize: 5,
        densityThreshold: 0.6
    },
    conflictParams: {
        conflictProbability: 0.3,
        resourceStealRate: 0.5,
        polarizationStrength: 0.2
    }
});

const endTime = Date.now();
const duration = ((endTime - startTime) / 1000).toFixed(2);

console.log(`\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration}—Å\n`);

// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
console.log('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò:\n');

// –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
console.log('=== –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===');
console.log(`–ê–≥–µ–Ω—Ç–æ–≤: ${result.agents.length}`);
console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${result.activeConnections}`);
console.log(`–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∏: ${(result.networkDensity * 100).toFixed(1)}%`);
console.log(`–¢–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${result.topicDistribution.length}`);

// –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
if (result.economicHistory && result.economicHistory.length > 0) {
    console.log('\n=== –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===');
    
    const lastEconomicState = result.economicHistory[result.economicHistory.length - 1];
    const firstEconomicState = result.economicHistory[0];
    
    console.log(`\n–ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏:`);
    console.log(`- –ñ–∏–≤—ã—Ö: ${firstEconomicState.survived}`);
    console.log(`- –ú–µ—Ä—Ç–≤—ã—Ö: ${firstEconomicState.died}`);
    console.log(`- –°—Ä–µ–¥–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã: ${firstEconomicState.avgResources.toFixed(1)}`);
    
    console.log(`\n–ö–æ–Ω–µ—Ü —Å–∏–º—É–ª—è—Ü–∏–∏:`);
    console.log(`- –ñ–∏–≤—ã—Ö: ${lastEconomicState.survived}`);
    console.log(`- –ú–µ—Ä—Ç–≤—ã—Ö: ${lastEconomicState.died}`);
    console.log(`- –°—Ä–µ–¥–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã: ${lastEconomicState.avgResources.toFixed(1)}`);
    console.log(`- –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${lastEconomicState.totalResources.toFixed(0)}`);
    
    const survivalRate = (lastEconomicState.survived / agents.length * 100).toFixed(1);
    const mortalityRate = (lastEconomicState.died / agents.length * 100).toFixed(1);
    
    console.log(`\n–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å: ${survivalRate}%`);
    console.log(`–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å: ${mortalityRate}%`);
    
    // –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ —Ü–∏–∫–ª–∞–º
    console.log(`\n–î–∏–Ω–∞–º–∏–∫–∞ —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç–∏:`);
    const milestones = [0, 10, 20, 30, 40, 49];
    milestones.forEach(cycle => {
        if (result.economicHistory[cycle]) {
            const state = result.economicHistory[cycle];
            console.log(`  –¶–∏–∫–ª ${cycle}: ${state.survived} –∂–∏–≤—ã—Ö, ${state.died} –º–µ—Ä—Ç–≤—ã—Ö`);
        }
    });
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–æ–≤
if (result.clanHistory && result.clanHistory.length > 0) {
    console.log('\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–æ–≤ ===');
    
    const lastClanState = result.clanHistory[result.clanHistory.length - 1];
    
    console.log(`\n–í—Å–µ–≥–æ –∫–ª–∞–Ω–æ–≤: ${lastClanState.clans.length}`);
    
    if (lastClanState.clans.length > 0) {
        console.log(`\n–¢–æ–ø-3 –∫–ª–∞–Ω–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É:`);
        const sortedBySize = [...lastClanState.clans].sort((a, b) => b.size - a.size);
        sortedBySize.slice(0, 3).forEach((clan, i) => {
            console.log(`  ${i + 1}. –ö–ª–∞–Ω ${clan.id}: ${clan.size} –∞–≥–µ–Ω—Ç–æ–≤, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å ${clan.density.toFixed(2)}, –ø—Ä–∞–≤–∏–ª–æ: ${clan.distributionRule}`);
        });
        
        const avgSize = lastClanState.clans.reduce((sum, c) => sum + c.size, 0) / lastClanState.clans.length;
        const avgDensity = lastClanState.clans.reduce((sum, c) => sum + c.density, 0) / lastClanState.clans.length;
        
        console.log(`\n–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞–Ω–∞: ${avgSize.toFixed(1)}`);
        console.log(`–°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å: ${avgDensity.toFixed(2)}`);
    }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
if (result.conflictHistory && result.conflictHistory.length > 0) {
    console.log('\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ===');
    
    const totalConflicts = result.conflictHistory.reduce((sum, h) => sum + h.conflictCount, 0);
    const totalStolen = result.conflictHistory.reduce((sum, h) => sum + h.resourcesStolen, 0);
    const totalPolarized = result.conflictHistory.reduce((sum, h) => sum + h.connectionsPolarized, 0);
    
    console.log(`\n–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: ${totalConflicts}`);
    console.log(`–£–∫—Ä–∞–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${totalStolen.toFixed(0)}`);
    console.log(`–ü–æ–ª—è—Ä–∏–∑–æ–≤–∞–Ω–æ —Å–≤—è–∑–µ–π: ${totalPolarized}`);
    
    if (totalConflicts > 0) {
        console.log(`\n–í —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç:`);
        console.log(`- –£–∫—Ä–∞–¥–µ–Ω–æ: ${(totalStolen / totalConflicts).toFixed(1)} —Ä–µ—Å—É—Ä—Å–æ–≤`);
        console.log(`- –ü–æ–ª—è—Ä–∏–∑–æ–≤–∞–Ω–æ: ${(totalPolarized / totalConflicts).toFixed(1)} —Å–≤—è–∑–µ–π`);
    }
}

// –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:\n');

let score = 0;
let maxScore = 0;
const checks = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –±–µ–∑ –æ—à–∏–±–æ–∫
maxScore++;
if (result && result.agents) {
    score++;
    checks.push('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ');
} else {
    checks.push('‚ùå –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –≠–∫–æ–Ω–æ–º–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
maxScore++;
if (result.economicHistory && result.economicHistory.length > 0) {
    score++;
    checks.push('‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
} else {
    checks.push('‚ùå –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ö–ª–∞–Ω—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è
maxScore++;
if (result.clanHistory && result.clanHistory.length > 0 && result.clanHistory[result.clanHistory.length - 1].clans.length > 0) {
    score++;
    checks.push('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–ª–∞–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
} else {
    checks.push('‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–ª–∞–Ω–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç
maxScore++;
const totalConflicts = result.conflictHistory ? result.conflictHistory.reduce((sum, h) => sum + h.conflictCount, 0) : 0;
if (totalConflicts > 0) {
    score++;
    checks.push('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
} else {
    checks.push('‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ï—Å—Ç—å –≤—ã–∂–∏–≤—à–∏–µ –∞–≥–µ–Ω—Ç—ã
maxScore++;
const lastEconomicState = result.economicHistory[result.economicHistory.length - 1];
if (lastEconomicState.survived > 0) {
    score++;
    checks.push('‚úÖ –ï—Å—Ç—å –≤—ã–∂–∏–≤—à–∏–µ –∞–≥–µ–Ω—Ç—ã');
} else {
    checks.push('‚ùå –í—Å–µ –∞–≥–µ–Ω—Ç—ã –ø–æ–≥–∏–±–ª–∏');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ë–∞–ª–∞–Ω—Å —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç–∏ (10-50%)
maxScore++;
const mortalityRate = (lastEconomicState.died / agents.length * 100);
if (mortalityRate >= 0 && mortalityRate <= 50) {
    score++;
    checks.push(`‚úÖ –°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ (${mortalityRate.toFixed(1)}%)`);
} else if (mortalityRate > 50 && mortalityRate < 80) {
    checks.push(`‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å (${mortalityRate.toFixed(1)}%)`);
} else if (mortalityRate >= 80) {
    checks.push(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å (${mortalityRate.toFixed(1)}%)`);
} else {
    checks.push(`‚ö†Ô∏è  –ù—É–ª–µ–≤–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å (—Å–ª–∏—à–∫–æ–º –ª–µ–≥–∫–æ)`);
}

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
checks.forEach(check => console.log(check));

console.log(`\n–û–±—â–∏–π –±–∞–ª–ª: ${score}/${maxScore}`);

if (score === maxScore) {
    console.log('üèÜ –û–¢–õ–ò–ß–ù–û! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
} else if (score >= maxScore * 0.8) {
    console.log('‚úÖ –•–û–†–û–®–û! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
} else if (score >= maxScore * 0.6) {
    console.log('‚ö†Ô∏è  –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.');
} else {
    console.log('‚ùå –ü–õ–û–•–û. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º.');
}

console.log('\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
