import { EconomicEngine } from './src/lib/economicEngine.js';
import { ClanSystem } from './src/lib/clanSystem.js';
import { ConflictMechanics } from './src/lib/conflictMechanics.js';

console.log('=== –¢–ï–°–¢: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —ç–∫–æ–Ω–æ–º–∏–∫–∏ ===\n');

// –°–æ–∑–¥–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const engine = new EconomicEngine();

console.log('üìä –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞–ª–∞–Ω—Å–∞:');
console.log(`- –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${engine.baseProductivity}`);
console.log(`- –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è: ${engine.minSurvival}`);
console.log(`- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${engine.maxMultiplier}x`);
console.log(`- –ü–æ—Ä–æ–≥ —Å–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏: ${engine.strongConnectionThreshold}`);
console.log(`- –ë–æ–Ω—É—Å –æ—Ç —Å–≤—è–∑–∏: ${(engine.connectionBonus * 100).toFixed(0)}%`);

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤—è–∑–µ–π
const agents = [];
const scenarios = [
    { name: '–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', connections: 0 },
    { name: '–°–ª–∞–±–æ —Å–≤—è–∑–∞–Ω–Ω—ã–π', connections: 2 },
    { name: '–°—Ä–µ–¥–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π', connections: 4 },
    { name: '–•–æ—Ä–æ—à–æ —Å–≤—è–∑–∞–Ω–Ω—ã–π', connections: 6 },
    { name: '–û—á–µ–Ω—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π', connections: 10 }
];

for (let i = 0; i < scenarios.length; i++) {
    agents.push({
        id: i,
        name: scenarios[i].name,
        economics: {
            alive: true,
            currentResources: 30,  // –ù–æ–≤—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            productionHistory: [],
            consumptionHistory: []
        }
    });
}

// –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–≤—è–∑–µ–π
const N = agents.length;
const connectionMatrix = Array(N).fill(null).map(() => Array(N).fill(0));

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º
for (let i = 0; i < N; i++) {
    const targetConnections = scenarios[i].connections;
    for (let j = 0; j < N; j++) {
        if (i !== j && j < targetConnections) {
            connectionMatrix[i][j] = 0.5; // –°–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å
        }
    }
}

console.log('\nüéÆ –°–∏–º—É–ª—è—Ü–∏—è 10 —Ü–∏–∫–ª–æ–≤:\n');

const cycleResults = [];

for (let cycle = 0; cycle < 10; cycle++) {
    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    agents.forEach((agent, i) => {
        if (agent.economics.alive) {
            const production = engine.calculateProduction(agent, i, connectionMatrix, agents);
            agent.economics.currentResources += production;
        }
    });

    // –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
    const consumptionResults = engine.processConsumption(agents);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    cycleResults.push({
        cycle,
        survived: consumptionResults.survived,
        died: consumptionResults.died,
        agents: agents.map(a => ({
            name: a.name,
            alive: a.economics.alive,
            resources: a.economics.currentResources
        }))
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
    console.log(`–¶–∏–∫–ª ${cycle}:`);
    agents.forEach(agent => {
        const status = agent.economics.alive ? '‚úÖ' : 'üíÄ';
        const resources = agent.economics.alive ? 
            agent.economics.currentResources.toFixed(1) : '0.0';
        console.log(`  ${status} ${agent.name}: ${resources} —Ä–µ—Å—É—Ä—Å–æ–≤`);
    });
    console.log(`  ‚Üí –í—ã–∂–∏–ª–æ: ${consumptionResults.survived}, –£–º–µ—Ä–ª–æ: ${consumptionResults.died}\n`);
}

console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n');

// –ü–æ–¥—Å—á–µ—Ç –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∞–≥–µ–Ω—Ç–æ–≤
const finalStats = agents.map((agent, i) => {
    const deathCycle = cycleResults.findIndex(r => !r.agents[i].alive);
    return {
        name: agent.name,
        connections: scenarios[i].connections,
        survived: agent.economics.alive,
        deathCycle: deathCycle >= 0 ? deathCycle : 'N/A',
        finalResources: agent.economics.currentResources.toFixed(1)
    };
});

console.log('| –¢–∏–ø –∞–≥–µ–Ω—Ç–∞ | –°–≤—è–∑–∏ | –°—Ç–∞—Ç—É—Å | –¶–∏–∫–ª —Å–º–µ—Ä—Ç–∏ | –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã |');
console.log('|------------|-------|--------|-------------|-------------------|');
finalStats.forEach(stat => {
    const status = stat.survived ? '‚úÖ –ñ–∏–≤' : 'üíÄ –ú–µ—Ä—Ç–≤';
    console.log(`| ${stat.name.padEnd(22)} | ${stat.connections.toString().padStart(5)} | ${status} | ${stat.deathCycle.toString().padStart(11)} | ${stat.finalResources.padStart(17)} |`);
});

// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞:\n');

const totalAlive = agents.filter(a => a.economics.alive).length;
const totalDead = agents.filter(a => !a.economics.alive).length;
const survivalRate = (totalAlive / agents.length * 100).toFixed(1);

console.log(`–í—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å: ${totalAlive}/${agents.length} (${survivalRate}%)`);
console.log(`–°–º–µ—Ä—Ç–Ω–æ—Å—Ç—å: ${totalDead}/${agents.length} (${(100 - survivalRate)}%)`);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è
const minConnectionsToSurvive = finalStats
    .filter(s => s.survived)
    .reduce((min, s) => Math.min(min, s.connections), Infinity);

console.log(`\n–ú–∏–Ω–∏–º—É–º —Å–≤—è–∑–µ–π –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è: ${minConnectionsToSurvive}`);

// –û—Ü–µ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞
console.log('\nüéØ –û—Ü–µ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞:');

if (totalDead === 0) {
    console.log('‚ùå –°–õ–ò–®–ö–û–ú –õ–ï–ì–ö–û - –Ω–∏–∫—Ç–æ –Ω–µ —É–º–µ—Ä');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á–∏—Ç—å minSurvival –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å baseProductivity');
} else if (totalDead === agents.length) {
    console.log('‚ùå –°–õ–ò–®–ö–û–ú –°–õ–û–ñ–ù–û - –≤—Å–µ —É–º–µ—Ä–ª–∏');
    console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–º–µ–Ω—å—à–∏—Ç—å minSurvival –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å baseProductivity');
} else if (totalDead >= 1 && totalDead <= 2) {
    console.log('‚úÖ –û–¢–õ–ò–ß–ù–û - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å!');
    console.log('   –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —É–º–∏—Ä–∞—é—Ç');
    console.log('   –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –≤—ã–∂–∏–≤–∞—é—Ç');
} else if (totalDead >= 3) {
    console.log('‚ö†Ô∏è  –ñ–ï–°–¢–ö–û - –≤—ã—Å–æ–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å');
    console.log('   –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –≤—ã–∂–∏–≤–∞—é—Ç');
}

// –¢–µ—Å—Ç —Å –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π (150 –∞–≥–µ–Ω—Ç–æ–≤)
console.log('\n\n=== –¢–ï–°–¢: –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è (150 –∞–≥–µ–Ω—Ç–æ–≤) ===\n');

const fullAgents = [];
for (let i = 0; i < 150; i++) {
    fullAgents.push({
        id: i,
        economics: {
            alive: true,
            currentResources: 30,
            productionHistory: [],
            consumptionHistory: []
        }
    });
}

// –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É —Å–≤—è–∑–µ–π (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–µ—Ç—å)
const fullN = fullAgents.length;
const fullConnectionMatrix = Array(fullN).fill(null).map(() => Array(fullN).fill(0));

for (let i = 0; i < fullN; i++) {
    for (let j = i + 1; j < fullN; j++) {
        const strength = Math.random();
        fullConnectionMatrix[i][j] = fullConnectionMatrix[j][i] = strength;
    }
}

engine.initializeAgentEconomics(fullAgents);

console.log('–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞ 30 —Ü–∏–∫–ª–æ–≤...\n');

const milestones = [0, 5, 10, 15, 20, 25, 30];
const fullResults = [];

for (let cycle = 0; cycle <= 30; cycle++) {
    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    fullAgents.forEach((agent, i) => {
        if (agent.economics.alive) {
            const production = engine.calculateProduction(agent, i, fullConnectionMatrix, fullAgents);
            agent.economics.currentResources += production;
        }
    });

    // –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
    const consumptionResults = engine.processConsumption(fullAgents);

    if (milestones.includes(cycle)) {
        const aliveCount = fullAgents.filter(a => a.economics.alive).length;
        const deadCount = fullAgents.filter(a => !a.economics.alive).length;
        const avgResources = fullAgents
            .filter(a => a.economics.alive)
            .reduce((sum, a) => sum + a.economics.currentResources, 0) / aliveCount;
        
        console.log(`–¶–∏–∫–ª ${cycle}: ${aliveCount} –∂–∏–≤—ã—Ö, ${deadCount} –º–µ—Ä—Ç–≤—ã—Ö, —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã: ${avgResources.toFixed(1)}`);
        
        fullResults.push({
            cycle,
            alive: aliveCount,
            dead: deadCount,
            avgResources
        });
    }
}

const finalAlive = fullAgents.filter(a => a.economics.alive).length;
const finalDead = fullAgents.filter(a => !a.economics.alive).length;
const finalSurvivalRate = (finalAlive / fullAgents.length * 100).toFixed(1);

console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏:\n');
console.log(`–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 150`);
console.log(`–§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö: ${finalAlive} (${finalSurvivalRate}%)`);
console.log(`–§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä—Ç–≤—ã—Ö: ${finalDead} (${(100 - finalSurvivalRate)}%)`);

console.log('\nüéØ –û—Ü–µ–Ω–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏:');

if (finalDead === 0) {
    console.log('‚ùå –°–õ–ò–®–ö–û–ú –õ–ï–ì–ö–û - –Ω–∏–∫—Ç–æ –Ω–µ —É–º–µ—Ä –∑–∞ 30 —Ü–∏–∫–ª–æ–≤');
} else if (finalDead > 0 && finalDead < 30) {
    console.log('‚úÖ –û–¢–õ–ò–ß–ù–û - –Ω–∏–∑–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å (0-20%)');
    console.log('   –ë–∞–ª–∞–Ω—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∏—Ä–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
} else if (finalDead >= 30 && finalDead < 75) {
    console.log('‚úÖ –•–û–†–û–®–û - —Å—Ä–µ–¥–Ω—è—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å (20-50%)');
    console.log('   –ë–∞–ª–∞–Ω—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
} else if (finalDead >= 75 && finalDead < 120) {
    console.log('‚ö†Ô∏è  –ñ–ï–°–¢–ö–û - –≤—ã—Å–æ–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å (50-80%)');
    console.log('   –ë–∞–ª–∞–Ω—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
} else {
    console.log('‚ùå –°–õ–ò–®–ö–û–ú –°–õ–û–ñ–ù–û - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å (>80%)');
}

console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
